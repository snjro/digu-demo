import{d as g,D as S,a as c,b as d}from"./dbBase.p4gtP5H-.js";import{i as u,a as p,s as b}from"./storeUserSettings.CKEuy7kV.js";import{T as f,s as D}from"./storeRpcSettings.f2TQTp0z.js";const e=c.Settings.rpcSettings,i=c.Settings.userSettings;class l extends g{constructor(){const t=d.secondNames.settings;super(t);const n=this.getSchemaDefinition();this.version(S.Settings).stores(n),this.on("populate",async o=>{await this.addInitialData(o)})}getSchemaDefinition(){return{[e]:"chainName",[i]:"userSettingsId"}}async addInitialData(t){await Promise.all([m(t),h(t)])}}const s=new l;async function m(a){const t=[];for(const n of f)await w(n.name)===void 0&&t.push(u(n));t.length>0&&await a.table(e).bulkAdd(t)}async function h(a){const t=[];await r("userSetting01")===void 0&&t.push(p),t.length>0&&await a.table(i).bulkAdd(t)}async function w(a){return await s.transaction("r",e,async()=>await s.table(e).get(a))}async function N(a,t,n){await s.transaction("rw",e,async()=>{await s.table(e).update(a,{[t]:n})}).then(()=>{D.updateState(a,{[t]:n})})}async function r(a){return await s.transaction("r",i,async()=>await s.table(i).get(a))}async function A(a,t){const n=await r(a);return n?n[t]:void 0}async function U(a,t){await s.transaction("rw",i,async()=>{await s.table(i).update("userSetting01",{[a]:t})}).then(()=>{b.updateState({[a]:t})})}export{w as a,r as b,N as c,A as g,U as u};
